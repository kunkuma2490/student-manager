
# Specifies the port number on which application will be served
server.port = 8080
# Name of the spring application. Helps to organize multiple configuration files
spring.application.name = studentManager
# Sets the context path of the application (http://server-ip:port/context-path)
server.servlet.context-path = /student
# Enable/disable the default spring boot whiteable error page which is shown in browsers in case of any error. This is disabled because custom error message is implemented
server.error.whitelabel.enabled = false
# Spring profiles
spring.profiles.active = dev, prod

###########################################################
# Database Configurations

# URL of the MariaDB server. Example- jdbc:mariadb://server-ip:port/database-name
spring.datasource.url = jdbc:mariadb://localhost:3306/student
# Username of the mariadb database user
spring.datasource.username = root
# Password of the mariadb database user
spring.datasource.password = root@123
# Driver class name which is used to connect to database
spring.datasource.tomcat.driver-class-name = org.mariadb.jdbc.Driver
# Initial number of connections when connection pool is initialized. This doesn't mean that connection pool can only have these number of connections.
spring.datasource.tomcat.initial-size = 10
# Denotes max number of connections that can remain active in connection pool at a time. 
# If more than max-active connections are requested at a time, they will be queued until connection pool become available again
spring.datasource.tomcat.max-active = 50
# Denotes maximum number of connections that can remain idle in a connection pool at a time. If more than max connections are idle, then excess connections are closed.
# This doesn't affect total number of connections that can be created by the connection pool. 
spring.datasource.tomcat.max-idle = 10
# Denotes wether connections should be validated before being borrowed/taken from the connection pool.
# If validation fails, then connection is closed and new connection is borrowed from connection pool.
spring.datasource.tomcat.test-on-borrow = true
# This setting uses a query to validate connections in the connection pool. If this query fails, the connection becomes invalid and closed.
spring.datasource.tomcat.validation-query = SELECT 1
# If enabled, DDL scripts are generated to create database schema using the entity files. It is recommended to keep this disabled in production environment.
spring.jpa.generate-ddl = false
# If true, JPA will log all the SQL queries. This helps debug the application. Disable this setting in production environment to keep the logs clean.
spring.jpa.show-sql = false
# This setting only works if spring.jpa.show-sql is set to true. It formats the SQL queries before logging. If false, then SQL queries are logged in a single line. 
spring.jpa.properties.hibernate.format_sql = true
# Denotes whether the table and column names should be quoted. This setting is helpful if table or column names contain SQL reserve words.
spring.jpa.properties.hibernate.globally_quoted_identifiers = true
# This property determines the behavior of JPA implementation. It performs following actions based on the set value:
# none: [Recommended] JPA will not generate the schema automatically. You will need to create the schema manually or use a different tool to generate the schema.
# validate: JPA will validate the schema, but will not generate it. The schema must already exist in the database.
# update: JPA will update the schema if it is out of sync with the entity classes in your application.
# create: JPA will create the schema if it does not exist.
# create-drop: JPA will create the schema if it does not exist and drop it when the SessionFactory is closed.
spring.jpa.hibernate.ddl-auto = none
# Naming strategy used to specify the case style used in database naming convention. For this project database tables and columns use snake_case style.
spring.jpa.hibernate.naming.physical-strategy = org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
